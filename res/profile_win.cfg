// Generally, this file has a set of bindings for Keyboard (+Mouse) control method. But it
// is possible to re-configure a meaning of any control code coming from any wireless protocol.
// So it is essential to divide all binding into sections like the following one:
//   [section_name_which_is_an_input_source_actually]
// Here are available input sources:
//   'Keyboard' (includes mouse), 'wifi', ...
// It is possible to set active input source in run-time, but the only on of them can active
// at a time.
//
// Bindings are a bit complicated to read or set up, but this is a way to make parser as simple
// as possible. Template is the following ([] means optional argument):
//   action = [modifier+][modifier+]key_code
// A 'modifier' is one of Ctrl or Alt or Shift buttons. It doesn't matter left or right
// modifier key was pressed. Although 3 or more modifiers for 1 binding are allowed here, there
// is no guarantee such keystroke will be captured. Modifiers are only about keyboard input
// source. Please see the linux/input.h for integer key codes; decimal and hex numbers are
// allowed (prefix '0x...' of '0X...' must be used in case of hex).
//
// Examples:
//   left_throttle_up = alt+44    // alt+z
//   shutdown = ctrl + 43         // ctrl+y
//
// Another stuff can be set up here is RC tank behavior. Everything what can be configured
// in run-time must be configured here under the section 'Behavior':
//   [Behavior]
//   feature_1 = value_2
// That means there is no default state for all features enlisted below, each profile must
// has all of them.

[IOSetup]
source = Keyboard
kbd_name = A4-Tech_piska_siska  // Keyboard name is used for accessing an appropriate event file [Linux]
log_lvl = 100500

[Keyboard]
move_fwd = 0x77             // w
move_bck = 0x73            // s
move_stop = 0x20       // SPACE
exit_app = 0x51        // Q
ltrk_fwd = 0x5B              // [
ltrk_bck = 0x27              // '
rtrk_fwd = 0x5D              // ]
rtrk_bck = 0x5C              // \
